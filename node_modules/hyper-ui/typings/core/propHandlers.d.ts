import { HNode } from "./HNode";
export declare type PropHandler<T = unknown> = (element: Element, newValue: T, oldValue: T | undefined, hNode: HNode<any>) => void;
export declare type RefCallback<T extends Element = Element> = (node?: T) => void;
export interface Attributes {
    [key: string]: string;
}
export interface EleProps<T extends Element = Element> {
    xmlns?: string;
    style?: string | {
        [key: string]: string;
    };
    class?: string | any[];
    ref?: RefCallback<T>;
    attr?: Attributes;
    prop?: Partial<T>;
    [key: string]: unknown;
}
export declare const propHandlers: Map<string, PropHandler<any>>;
