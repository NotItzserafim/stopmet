import { Store } from "./Store";
import { EleProps } from "./propHandlers";
export declare type ArrayWrapped<T> = T extends any[] ? T : [T];
export declare type HProps<P extends object = EleProps> = Required<{
    [K in keyof P]: K extends 'children' ? P extends {
        children: any;
    } ? 
    /******/ ArrayWrapped<P['children']> : 
    /******/ P extends {
        children?: any;
    } ? 
    /**********/ ArrayWrapped<P['children']> | undefined : 
    /**********/ unknown[] : P[K];
}>;
export interface HDesc<P extends object = EleProps, S extends object = any, C extends object = any> {
    state?: Array<keyof S>;
    context?: Array<keyof C>;
    init?: (this: HNode<P, S, C>, props: HProps<P>, store: Store<S>, context: Store<C>) => void;
    render: (this: HNode<P, S, C>, props: HProps<P>, store: Store<S>, context: Store<C>) => unknown;
    clear?: (this: HNode<P, S, C>, props: HProps<P>, store: Store<S>, context: Store<C>) => void;
    catch?: (this: HNode<P, S, C>, err: any, props: HProps<P>, store: Store<S>, context: Store<C>) => unknown;
}
export declare type EventRecord = [string, EventListener, boolean | AddEventListenerOptions];
export declare type EventMap = Map<string, EventRecord>;
export interface HNode<P extends object = EleProps, S extends object = any, C extends object = any> {
    isHNode: true;
    type: unknown;
    desc?: HDesc<P, S, C>;
    props: HProps<P>;
    store?: Store<S>;
    context?: Store<C>;
    owner?: HNode<any>;
    ownerNode?: Node;
    output?: unknown[];
    nodes?: Node[];
    active: boolean;
    events?: EventMap;
    error?: unknown;
}
export declare const toNodes: (src: unknown, context: Store<any>, ownerNode: Node, owner?: HNode<any, any, any> | undefined) => Node[];
