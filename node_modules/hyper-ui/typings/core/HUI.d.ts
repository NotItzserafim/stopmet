import { HNode } from "./HNode";
import { HType } from "./registry";
import { EleProps } from "./propHandlers";
export declare const HUI: {
    <P extends object = EleProps<Element>, S extends object = any, C extends object = any>(type: string | HType<P, S, C>, props?: P | null | undefined, ...children: unknown[]): HNode<P, S, C>;
    registry: Map<string | HType<any, any, any>, import("./HNode").HDesc<any, any, any>>;
    define: <P extends object = EleProps<Element>, S extends object = any, C extends object = any>(name: string, desc: import("./HNode").HDesc<P, S, C>) => HType<P, S, C>;
    createStore: <T extends object = any>() => import("./Store").Store<T>;
    propHandlers: Map<string, import("./propHandlers").PropHandler<any>>;
    noCmpProps: string[];
    render: (src: any, options?: import("./render").RenderOptions) => void;
    tick(callback: () => void): void;
    frameLimit: number;
    defer: <A extends any[] = any[]>(callback: import("./ticker").DeferCallback<A>, ...args: A) => void;
    Portal: HType<import("../ext/Portal").PortalProps, import("../ext/Portal").PortalStore, {}>;
    Context: HType<import("../ext/Context").ContextProps, {}, any>;
    Fragment: HType<import("../ext/Fragment").FragmentProps, {}, {}>;
    cmp: (a: unknown, b: unknown) => boolean;
};
